// Configuration globale
const config = {
    githubUsername: 'ITSsghir',
    githubToken: '', // Laissez vide pour les repos publics
    apiBaseUrl: 'http://localhost:3000'
};

// Cache DOM pour les performances
const domCache = {
    githubRepos: document.getElementById('github-projects'),
    cvSections: document.querySelectorAll('.cv-section'),
    skillBars: document.querySelectorAll('.skill-bar'),
    experienceItems: document.querySelectorAll('.experience-item'),
    tableList: document.getElementById('table-list')
};

/* ======================
      PARTIE CLASSIFICATION
      ====================== */
   
   // Donn√©es Iris g√©n√©r√©es al√©atoirement
   const irisData = {
     features: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width'],
     targetNames: ['setosa', 'versicolor', 'virginica'],
     samples: Array.from({length: 30}, (_, i) => ({
       id: i+1,
       sepal_length: (4 + Math.random() * 3.5).toFixed(1),
       sepal_width: (2 + Math.random() * 1.5).toFixed(1),
       petal_length: (1 + Math.random() * 5).toFixed(1),
       petal_width: (0.1 + Math.random() * 2.5).toFixed(1),
       target: Math.floor(Math.random() * 3) // Valeur cible simul√©e
     }))
   };

   // Simulateur de mod√®le IA
   class IrisClassifier {
 constructor(data) {
   this.modelTrained = false;
   this.samples = data.samples; // Stocker les donn√©es simul√©es
   this.targetNames = data.targetNames;
   this.features = data.features;
 }

 trainMock() {
   return new Promise(resolve => {
     setTimeout(() => {
       this.modelTrained = true;
       resolve();
     }, 2000);
   });
 }

 predictMock() {
   return this.samples.map(sample => ({
     ...sample,
     prediction: sample.target // Simulation d'une pr√©diction parfaite
   }));
 }
}

// Cr√©e le classifieur avec les donn√©es
let classifier = new IrisClassifier(irisData);

   function generateDataTable(data, withPrediction = false) {
     let html = `<table>
       <tr>
         ${data.features.map(f => `<th class="feature-column">${f}</th>`).join('')}
         ${withPrediction ? '<th class="prediction-column">Pr√©diction</th>' : ''}
       </tr>`;
     
     data.samples.forEach(sample => {
       html += `<tr>
         <td>${sample.sepal_length}</td>
         <td>${sample.sepal_width}</td>
         <td>${sample.petal_length}</td>
         <td>${sample.petal_width}</td>
         ${withPrediction ? 
           `<td class="prediction-column">${irisData.targetNames[sample.prediction]}</td>` : ''}
       </tr>`;
     });
     
     return html + '</table>';
   }
 
   async function startClassification() {
 const status = document.getElementById('classification-status');
 const btn = document.getElementById('classify-btn');
 const resetBtn = document.getElementById('reset-btn');

 btn.disabled = true;
 status.innerHTML = '<div class="loading-message">‚öôÔ∏è Entra√Ænement du mod√®le en cours...</div>';

 await classifier.trainMock();

 status.innerHTML = '<div class="loading-message">üîÆ Pr√©diction des r√©sultats...</div>';
 const results = classifier.predictMock();

 setTimeout(() => {
   document.getElementById('prediction-section').style.display = 'block';
   document.getElementById('prediction-results').innerHTML =
     generateDataTable({ features: irisData.features, samples: results }, true);

   status.innerHTML = '<div style="color:#00ffcc">‚úÖ Pr√©dictions termin√©es avec succ√®s!</div>';
   btn.disabled = false;
   resetBtn.style.display = 'inline-block'; // üëà Affiche le bouton reset
 }, 1500);
}
function resetClassification() {
 // Masquer les r√©sultats
 document.getElementById('prediction-section').style.display = 'none';
 document.getElementById('prediction-results').innerHTML = '';
 document.getElementById('classification-status').innerHTML = '';
 document.getElementById('reset-btn').style.display = 'none';

 // G√©n√©rer de nouvelles donn√©es
 irisData.samples = Array.from({length: 30}, (_, i) => ({
   id: i + 1,
   sepal_length: (4 + Math.random() * 3.5).toFixed(1),
   sepal_width: (2 + Math.random() * 1.5).toFixed(1),
   petal_length: (1 + Math.random() * 5).toFixed(1),
   petal_width: (0.1 + Math.random() * 2.5).toFixed(1),
   target: Math.floor(Math.random() * 3)
 }));

 // R√©initialiser le classifieur
 classifier = new IrisClassifier(irisData);

 // R√©afficher les nouvelles donn√©es
 document.getElementById('test-data').innerHTML =
   generateDataTable({ features: irisData.features, samples: irisData.samples });
}



   function toggleClassification() {
 const classification = document.getElementById('classification-container');
 const qlearning = document.getElementById('qlearning-container');

 const isVisible = classification.style.display === 'block';

 // Masquer les deux
 classification.style.display = 'none';
 qlearning.style.display = 'none';

 // Afficher classification seulement si elle √©tait cach√©e
 if (!isVisible) {
   classification.style.display = 'block';
   document.getElementById('test-data').innerHTML = 
     generateDataTable({ features: irisData.features, samples: irisData.samples });
 }
}



       // Initialisation de SQL.js de mani√®re asynchrone
   async function initDatabase() {
       try {
           const SQL = await initSqlJs({
               locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
           });
           window.db = new SQL.Database();
       
       // Cr√©ation et remplissage des tables
       db.run(`
               -- Table Utilisateur (profil principal)
               CREATE TABLE Utilisateur (
                   id INTEGER PRIMARY KEY,
                   nom TEXT NOT NULL,
                   email TEXT NOT NULL,
                   telephone TEXT,
                   linkedin TEXT,
                   titre_poste TEXT,
                   disponibilite TEXT,
                   description TEXT
               );

               -- Table Formation
               CREATE TABLE Formation (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   diplome TEXT NOT NULL,
                   etablissement TEXT NOT NULL,
                   ville TEXT,
                   periode TEXT,
                   description TEXT,
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Table Comp√©tences
               CREATE TABLE Competences (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   categorie TEXT NOT NULL,
                   nom TEXT NOT NULL,
                   niveau INTEGER CHECK (niveau BETWEEN 1 AND 5),
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Table Technologies
               CREATE TABLE Technologies (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   nom TEXT NOT NULL,
                   icone TEXT,
                   categorie TEXT,
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Table Langues
               CREATE TABLE Langues (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   langue TEXT NOT NULL,
                   niveau TEXT NOT NULL,
                   certification TEXT,
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Table Exp√©riences
               CREATE TABLE Experiences (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   titre TEXT NOT NULL,
                   entreprise TEXT NOT NULL,
                   lieu TEXT,
                   date_debut TEXT,
                   date_fin TEXT,
                   description TEXT,
                   type TEXT CHECK (type IN ('stage', 'emploi', 'projet', 'freelance')),
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Table Certifications
               CREATE TABLE Certifications (
                   id INTEGER PRIMARY KEY,
                   utilisateur_id INTEGER,
                   nom TEXT NOT NULL,
                   organisme TEXT,
                   date_obtention TEXT,
                   FOREIGN KEY (utilisateur_id) REFERENCES Utilisateur(id)
               );

               -- Insertion des donn√©es de base
               INSERT INTO Utilisateur VALUES (
                   1, 
                   'Itssghir',
                   'anas.sghir.2912@gmail.com',
                   '+33758934175',
                   'https://www.linkedin.com/in/anas-sghir/',
                   'Data Scientist & ML Engineer',
                   '√Ä partir de septembre 2025',
                   'Actuellement √©tudiant en Master 2 MIAGE, o√π j''ai acquis une solide exp√©rience en informatique, en gestion et en organisation. Ma sp√©cialisation en conception, d√©veloppement et gestion de projets informatiques m''a permis de ma√Ætriser plusieurs langages informatiques et de travailler efficacement sur diff√©rentes plateformes et logiciels. Mon int√©r√™t pour les nouvelles technologies et les d√©fis complexes m''a rendu curieux, cr√©atif et passionn√© par la recherche de solutions innovantes.'
               );

               -- Formation
               INSERT INTO Formation VALUES
                   (1, 1, 'Master 2 MIAGE - IDP', 'Universit√© Toulouse III - Paul Sabatier', 'Toulouse', '2023-2025', 'Ing√©nierie des Donn√©es et Protection'),
                   (2, 1, 'Licence Informatique - MIAGE', 'Universit√© Aix-Marseille', 'Aix-en-Provence', '2021-2023', 'Parcours MIAGE');

               -- Comp√©tences
               INSERT INTO Competences (utilisateur_id, categorie, nom, niveau) VALUES
                   -- Programmation
                   (1, 'Programmation', 'Python', 5),
                   (1, 'Programmation', 'Java', 4),
                   (1, 'Programmation', 'C', 4),
                   (1, 'Programmation', 'R', 4),
                   -- Web
                   (1, 'Web', 'HTML', 4),
                   (1, 'Web', 'CSS', 4),
                   (1, 'Web', 'JavaScript', 4),
                   (1, 'Web', 'Django', 4),
                   -- Data Science
                   (1, 'Data Science', 'SQL', 5),
                   (1, 'Data Science', 'Python', 5),
                   (1, 'Data Science', 'NoSQL', 4),
                   -- Data Analysis
                   (1, 'Data Analysis', 'Tableau', 4),
                   (1, 'Data Analysis', 'Power BI', 4),
                   -- Gestion de Projet
                   (1, 'Gestion de Projet', 'SCRUM', 4),
                   (1, 'Gestion de Projet', 'GANTT', 4),
                   (1, 'Gestion de Projet', 'TOGAF', 3),
                   (1, 'Gestion de Projet', 'ARCHIMATE', 3),
                   -- Conception
                   (1, 'Conception', 'MERISE', 4),
                   (1, 'Conception', 'UML', 4),
                   (1, 'Conception', 'SysML', 4),
                   -- Bases de Donn√©es
                   (1, 'Bases de Donn√©es', 'MySQL', 5),
                   (1, 'Bases de Donn√©es', 'Dataiku', 4),
                   (1, 'Bases de Donn√©es', 'PostgreSQL', 4),
                   -- Cloud
                   (1, 'Cloud', 'IBM', 3),
                   (1, 'Cloud', 'AWS', 3),
                   -- Cybers√©curit√©
                   (1, 'Cybers√©curit√©', 'OpenSSL', 4),
                   (1, 'Cybers√©curit√©', 'RSA', 4),
                   (1, 'Cybers√©curit√©', 'AES', 4);

               -- Technologies
               INSERT INTO Technologies (utilisateur_id, nom, icone, categorie) VALUES
                   (1, 'IntelliJ IDEA', 'fab fa-java', 'IDE'),
                   (1, 'Visual Studio', 'fas fa-code', 'IDE'),
                   (1, 'Docker', 'fab fa-docker', 'DevOps'),
                   (1, 'MongoDB', 'fas fa-database', 'Database'),
                   (1, 'R Studio', 'fab fa-r-project', 'Data Science'),
                   (1, 'DataGrip', 'fas fa-database', 'Database'),
                   (1, 'VirtualBox', 'fas fa-box', 'Virtualisation'),
                   (1, 'PostMan', 'fas fa-paper-plane', 'API Testing');

               -- Langues
               INSERT INTO Langues (utilisateur_id, langue, niveau, certification) VALUES
                   (1, 'Fran√ßais', 'Natif', NULL),
                   (1, 'Anglais', 'B2', 'TOEIC'),
                   (1, 'Arabe', 'Natif', NULL);

               -- Exp√©riences
               INSERT INTO Experiences (utilisateur_id, titre, entreprise, lieu, date_debut, date_fin, description, type) VALUES
                   (1, 'Product Owner / Data Engineer', 'La Banque Postale', 'Toulouse', '2025', 'En cours', 
                   'Documentation technique et m√©tier des donn√©es\nMod√©lisation logique des donn√©es et lineage complet\nTableaux de bord avec Tableau & Power BI\nRecettes SQL et Python sur Dataiku\nOptimisation des requ√™tes sur gros volumes\nTransformation des besoins m√©tiers en dashboards pertinents', 'stage'),
                   
                   (1, 'D√©veloppeur Application Empreinte Carbone', 'Universit√© Toulouse III', 'Toulouse', '2023', '2024',
                   'D√©veloppement d''une application de calcul d''empreinte carbone (Python, React Native)\nReconnaissance cam√©ra et vocale (APIs Google)\nGestion compl√®te du projet (coordination, planification, supervision)', 'projet'),
                   
                   (1, 'Chef de Projet IT', 'SHL', 'Marseille', '2022', '2023',
                   'D√©veloppement full-stack d''une interface d''administration\nLeadership dans la finalisation du site\nGestion d''√©quipe multidisciplinaire et alignement strat√©gique', 'emploi'),
                   
                   (1, 'D√©veloppeur Web Freelance', 'Ind√©pendant', 'Aix-en-Provence', '2021', '2022',
                   'Conception et d√©veloppement de sites web multisecteurs\nTravail en √©quipe interdisciplinaire\nComp√©tences en gestion, communication, autonomie', 'freelance');

               -- Certifications
               INSERT INTO Certifications (utilisateur_id, nom, organisme, date_obtention) VALUES
                   (1, 'Core Designer', 'Dataiku', '2024');
           `);

           updateTableList();
           console.log('Base de donn√©es initialis√©e avec succ√®s');
       } catch (err) {
           console.error('Erreur lors de l\'initialisation de la base de donn√©es:', err);
       }
   }

   function updateTableList() {
       if (!domCache.tableList) return;

       try {
       const res = db.exec(`
               SELECT name, 
                   (SELECT COUNT(*) FROM pragma_table_info(name)) as columns,
           CASE name
             WHEN 'Utilisateur' THEN (SELECT COUNT(*) FROM Utilisateur)
             WHEN 'Formation' THEN (SELECT COUNT(*) FROM Formation)
             WHEN 'Competences' THEN (SELECT COUNT(*) FROM Competences)
             WHEN 'Technologies' THEN (SELECT COUNT(*) FROM Technologies)
             WHEN 'Langues' THEN (SELECT COUNT(*) FROM Langues)
             WHEN 'Experiences' THEN (SELECT COUNT(*) FROM Experiences)
             WHEN 'Certifications' THEN (SELECT COUNT(*) FROM Certifications)
                   END as rows
         FROM sqlite_master 
         WHERE type='table'
         ORDER BY name;
       `);

       if (res[0]) {
               const tables = res[0].values.map(([name, cols, rows]) => `
                   <li class="table-item">
             <div class="table-name">${name}</div>
             <div class="table-stats">
               <span class="table-cols">${cols} colonnes</span>
               <span class="table-rows">${rows} enregistrements</span>
             </div>
                   </li>
               `).join('');
         
               domCache.tableList.innerHTML = `
           <div class="table-header">üìä Base de donn√©es du CV</div>
           <div class="table-description">
             Explorez les diff√©rentes tables de mon CV interactif avec des requ√™tes SQL
           </div>
           <ul class="table-list">
                       ${tables}
           </ul>
         `;
       }
       } catch (error) {
           console.error('Erreur lors de la mise √† jour de la liste des tables:', error);
       }
   }

   // SQL History Management
   const sqlHistory = {
       queries: [],
       currentIndex: -1,
       maxSize: 50
   };

   // Gestionnaire d'√©v√©nements pour les touches de l'historique SQL
   document.addEventListener('DOMContentLoaded', function() {
       const sqlInput = document.getElementById('sql-input');
       sqlInput.addEventListener('keydown', handleSqlInputKeydown);
   });

   function handleSqlInputKeydown(event) {
       if (event.key === 'ArrowUp') {
           event.preventDefault();
           if (sqlHistory.currentIndex > 0) {
               sqlHistory.currentIndex--;
               updateSqlInput(sqlHistory.queries[sqlHistory.currentIndex]);
           }
       } else if (event.key === 'ArrowDown') {
           event.preventDefault();
           if (sqlHistory.currentIndex < sqlHistory.queries.length - 1) {
               sqlHistory.currentIndex++;
               updateSqlInput(sqlHistory.queries[sqlHistory.currentIndex]);
           } else {
               sqlHistory.currentIndex = sqlHistory.queries.length;
               updateSqlInput('');
           }
       } else if (event.key === 'Enter' && event.ctrlKey) {
           event.preventDefault();
           runSQL();
       }
   }

   function updateSqlInput(query) {
       const sqlInput = document.getElementById('sql-input');
       if (sqlInput) sqlInput.value = query;
   }

   function addToHistory(query) {
       if (query.trim() === '') return;
       
       if (sqlHistory.queries[sqlHistory.queries.length - 1] !== query) {
           sqlHistory.queries.push(query);
           if (sqlHistory.queries.length > sqlHistory.maxSize) {
               sqlHistory.queries.shift();
           }
       }
       sqlHistory.currentIndex = sqlHistory.queries.length;
   }

   // Enhanced SQL execution
   function runSQL() {
       const input = document.getElementById('sql-input').value;
       const output = document.getElementById('sql-output');
       
       if (!input.trim()) {
           output.innerHTML = '<div class="error-message">‚ùå Veuillez entrer une requ√™te SQL</div>';
           return;
       }
       
       try {
           addToHistory(input);
       const results = db.exec(input);
           
           if (results.length > 0) {
               let html = '<div class="sql-results">';
               results.forEach(result => {
                   html += '<table class="sql-table">';
                   html += '<tr>' + result.columns.map(col => 
                       `<th>${col}</th>`).join('') + '</tr>';
                   result.values.forEach(row => {
                       html += '<tr>' + row.map(cell => 
                           `<td>${cell}</td>`).join('') + '</tr>';
                   });
                   html += '</table>';
               });
               html += '</div>';
               output.innerHTML = html;
           } else {
               output.innerHTML = '<div class="success-message">‚úîÔ∏è Requ√™te ex√©cut√©e avec succ√®s.</div>';
           }
     } catch (e) {
           output.innerHTML = `<div class="error-message">‚ùå Erreur: ${e.message}</div>`;
       }
   }

   // SQL Export functionality
   function exportSqlResults(format = 'csv') {
       const output = document.getElementById('sql-output');
       const tables = output.querySelectorAll('.sql-table');
       
       if (tables.length === 0) {
           alert('Aucun r√©sultat √† exporter');
           return;
       }
       
       let exportContent = '';
       
       if (format === 'csv') {
           tables.forEach(table => {
               const rows = Array.from(table.querySelectorAll('tr'));
               rows.forEach(row => {
                   const cells = Array.from(row.querySelectorAll('th, td'));
                   exportContent += cells.map(cell => 
                       `"${cell.textContent.replace(/"/g, '""')}"`
                   ).join(',') + '\n';
               });
               exportContent += '\n';
           });
       } else if (format === 'json') {
           const data = Array.from(tables).map(table => {
               const rows = Array.from(table.querySelectorAll('tr'));
               const headers = Array.from(rows[0].querySelectorAll('th')).map(th => th.textContent);
               const dataRows = rows.slice(1);
               
               return dataRows.map(row => {
                   const cells = Array.from(row.querySelectorAll('td'));
                   return Object.fromEntries(
                       headers.map((header, i) => [header, cells[i].textContent])
                   );
               });
           });
           exportContent = JSON.stringify(data, null, 2);
       }
       
       const blob = new Blob([exportContent], { 
           type: format === 'csv' ? 'text/csv;charset=utf-8' : 'application/json' 
       });
       const url = URL.createObjectURL(blob);
       const a = document.createElement('a');
       a.href = url;
       a.download = `sql_results.${format}`;
       document.body.appendChild(a);
       a.click();
       document.body.removeChild(a);
       URL.revokeObjectURL(url);
   }

   // Chatbot Implementation
   const chatbot = {
       messages: [],
       systemPrompt: `Tu es un assistant virtuel pour le portfolio d'Anas Sghir. 
       Tu as acc√®s √† toutes les informations sur son profil, ses comp√©tences et son exp√©rience.
       R√©ponds de mani√®re professionnelle et concise aux questions sur son parcours.
       Informations principales:
       - Data Scientist & ML Engineer
       - Expert en Python, TensorFlow, PyTorch
       - Certifi√© Dataiku Core Designer
       - Formation: Master MIAGE
       - Exp√©rience en IA et automatisation`
   };

   async function sendMessage() {
       const input = document.getElementById('chat-input');
       const message = input.value.trim();
       
       if (!message) return;
       
       input.value = '';
       appendMessage('user', message);
       
       try {
           const response = await fetch(`${config.apiBaseUrl}/api/chat/message`, {
               method: 'POST',
               headers: {
                   'Content-Type': 'application/json'
               },
               body: JSON.stringify({
                   message: message
               })
           });

           const data = await response.json();
           if (data.error) {
               throw new Error(data.error.message);
           }
           
           const botResponse = data.message;
           appendMessage('bot', botResponse);
           
           chatbot.messages.push(
               { role: 'user', content: message },
               { role: 'assistant', content: botResponse }
           );
           
       } catch (error) {
           appendMessage('error', 'D√©sol√©, une erreur est survenue. Veuillez r√©essayer.');
           console.error('Chatbot error:', error);
       }
   }

   function appendMessage(type, content) {
       const messages = document.getElementById('chat-messages');
       if (!messages) return;
       
       const messageDiv = document.createElement('div');
       messageDiv.className = `chat-message ${type}-message`;
       
       messageDiv.innerHTML = `
           <div class="message-content">
               ${type === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>'}
               <p>${content}</p>
           </div>
       `;
       
       messages.appendChild(messageDiv);
       messages.scrollTop = messages.scrollHeight;
   }

   // Theme Manager
   const themeManager = {
       isDark: true,
       
       lightTheme: {
           '--bg-primary': '#ffffff',
           '--bg-secondary': '#f0f0f0',
           '--text-primary': '#333333',
           '--text-secondary': '#666666',
           '--accent-primary': '#9b59b6',
           '--accent-secondary': '#8e44ad',
           '--neon-glow': 'rgba(155, 89, 182, 0.5)'
       },
       
       darkTheme: {
           '--bg-primary': '#4b0082',
           '--bg-secondary': '#2c003e',
           '--text-primary': '#ffffff',
           '--text-secondary': '#cccccc',
           '--accent-primary': '#00ffcc',
           '--accent-secondary': '#00ccaa',
           '--neon-glow': 'rgba(0, 255, 204, 0.5)'
       },
       
       toggle() {
           this.isDark = !this.isDark;
           this.applyTheme();
       },
       
       applyTheme() {
           const theme = this.isDark ? this.darkTheme : this.lightTheme;
           document.documentElement.style.transition = 'all 0.5s ease';
           
           Object.entries(theme).forEach(([property, value]) => {
               document.documentElement.style.setProperty(property, value);
           });
           
           localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
           
           const themeIcon = document.getElementById('theme-toggle-icon');
           if (themeIcon) {
               themeIcon.className = this.isDark ? 'fas fa-sun' : 'fas fa-moon';
           }
       },
       
       init() {
           const savedTheme = localStorage.getItem('theme');
           if (savedTheme) {
               this.isDark = savedTheme === 'dark';
           } else {
               this.isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
           }
           this.applyTheme();
       }
   };

   // Initialize everything when DOM is loaded
   document.addEventListener('DOMContentLoaded', function() {
       // Initialize SQL input handling
       const sqlInput = document.getElementById('sql-input');
       if (sqlInput) {
           sqlInput.addEventListener('keydown', handleSqlInputKeydown);
       }
       
       // Initialize chat input handling
       const chatInput = document.getElementById('chat-input');
       if (chatInput) {
           chatInput.addEventListener('keypress', function(e) {
               if (e.key === 'Enter' && !e.shiftKey) {
                   e.preventDefault();
                   sendMessage();
               }
           });
       }
       
       // Initialize theme
       themeManager.init();
       const themeToggle = document.getElementById('theme-toggle');
       if (themeToggle) {
           themeToggle.addEventListener('click', () => themeManager.toggle());
       }
   });

   // SYST√àME Q-LEARNING COMPLET
   const gridElement = document.getElementById("grid");
   let agentPos = 0;
   const goalPos = 24;
   let training = false;
   let episodes = 0;
   let steps = 0;
   let trainingInterval;
   let optimalPath = [];
   const qTable = Array.from({ length: 25 }, () => new Array(4).fill(0));
   const alpha = 0.3;
   const gamma = 0.9;
   let epsilon = 0.8;
   const epsilonDecay = 0.98;

   function drawGrid() {
     gridElement.innerHTML = "";
     for (let i = 0; i < 25; i++) {
       const cell = document.createElement("div");
       cell.className = "cell" + (optimalPath.includes(i) ? " optimal-path" : "");
       const maxQ = Math.max(...qTable[i]) || 0;
       cell.style.background = `linear-gradient(to top, 
         rgba(106,13,173,1) ${100 - maxQ * 2}%, 
         rgba(0,255,204,1) ${maxQ * 2}%)`;
       
       if (i === agentPos) cell.innerHTML = '<div class="agent"></div>';
       if (i === goalPos) cell.innerHTML = '<div class="goal"></div>';
       gridElement.appendChild(cell);
     }
   }

   function getValidActions(pos) {
     const actions = [];
     if (pos >= 5) actions.push(0); // Haut
     if (pos < 20) actions.push(1); // Bas
     if (pos % 5 !== 0) actions.push(2); // Gauche
     if (pos % 5 !== 4) actions.push(3); // Droite
     return actions;
   }

   function takeAction(pos, action) {
     const newPos = [
       pos - 5, // Haut
       pos + 5, // Bas
       pos - 1, // Gauche
       pos + 1  // Droite
     ][action];
     return (newPos >= 0 && newPos < 25) ? newPos : pos;
   }

   function calculateOptimalPath() {
     optimalPath = [];
     let currentPos = 0;
     const visited = new Set();
     
     while (currentPos !== goalPos && !visited.has(currentPos)) {
       optimalPath.push(currentPos);
       visited.add(currentPos);
       const actions = getValidActions(currentPos);
       if (actions.length === 0) break;
       const bestAction = actions.reduce((a, b) => 
         qTable[currentPos][a] > qTable[currentPos][b] ? a : b);
       currentPos = takeAction(currentPos, bestAction);
     }
     if (currentPos === goalPos) optimalPath.push(goalPos);
   }

   function startQLearning() {
     const status = document.getElementById("status");
     const startBtn = document.getElementById("start-btn");

     if (!training) {
       // R√©initialisation compl√®te
       optimalPath = [];
       qTable.forEach((_, i) => qTable[i].fill(0));
       episodes = 0;
       steps = 0;
       agentPos = 0;
       epsilon = 0.8;
       training = true;
       startBtn.textContent = "Arr√™ter l'apprentissage";
       status.innerHTML = "";

       trainingInterval = setInterval(() => {
         let currentPos = agentPos;
         let episodeSteps = 0;
         let reachedGoal = false;
         
         while (episodeSteps < 20 && !reachedGoal) {
           const actions = getValidActions(currentPos);
           const action = Math.random() < epsilon 
             ? actions[Math.floor(Math.random() * actions.length)]
             : actions.reduce((a, b) => qTable[currentPos][a] > qTable[currentPos][b] ? a : b);
           
           const newPos = takeAction(currentPos, action);
           const reward = newPos === goalPos ? 100 : -0.1;
           const maxFutureQ = newPos === goalPos ? 0 : Math.max(...qTable[newPos]);
           
           qTable[currentPos][action] += alpha * (reward + gamma * maxFutureQ - qTable[currentPos][action]);
           
           currentPos = newPos;
           steps++;
           episodeSteps++;
           
           if (currentPos === goalPos) {
             episodes++;
             reachedGoal = true;
             epsilon *= epsilonDecay;
             currentPos = 0;
           }
         }

         agentPos = currentPos;
         drawGrid();
         
         status.innerHTML = `
           üèÜ √âpisodes r√©ussis: <span style="color: #00ffcc">${episodes}</span><br>
           üö∂ Pas total: <span style="color: #ffd700">${steps}</span><br>
           üîç Exploration: <span style="color: #9b59b6">${(epsilon * 100).toFixed(1)}%</span>
         `;

         if (episodes >= 20) {
           clearInterval(trainingInterval);
           training = false;
           calculateOptimalPath();
           drawGrid();
           
           const pathDisplay = document.createElement("div");
           pathDisplay.id = "path-display";
           const pathSteps = optimalPath.map(pos => {
             const x = (pos % 5) + 1;
             const y = Math.floor(pos / 5) + 1;
             return `(${x},${y})`;
           }).join(" ‚Üí ");
           
           pathDisplay.innerHTML = `
             <strong>üåü Chemin Optimal üåü</strong><br>
             ${pathSteps}<br>
             Longueur: ${optimalPath.length - 1} pas
           `;
           
           status.appendChild(pathDisplay);
           startBtn.textContent = "Recommencer";
         }
       }, 300);
     } else {
       clearInterval(trainingInterval);
       training = false;
       startBtn.textContent = "D√©marrer l'apprentissage";
       status.textContent = "üõë Apprentissage arr√™t√©";
     }
   }

   drawGrid();

   // TEXTE ROTATIF
   const phrases = [
     "Data Science & Machine Learning",
     "Python | TensorFlow | PyTorch",
     "Apprentissage Automate Innovant",
     "Solutions IA sur Mesure"
   ];
   let index = 0;
   const rotatingText = document.getElementById("rotating-text");
   setInterval(() => {
     rotatingText.style.opacity = 0;
     setTimeout(() => {
       rotatingText.textContent = phrases[index];
       rotatingText.style.opacity = 1;
       index = (index + 1) % phrases.length;
     }, 500);
   }, 4000);

   function toggleQlearning() {
 const qlearning = document.getElementById("qlearning-container");
 const classification = document.getElementById("classification-container");

 const isVisible = qlearning.style.display === 'block';

 // Masquer les deux
 qlearning.style.display = 'none';
 classification.style.display = 'none';

 // Afficher q-learning seulement si il √©tait cach√©
 if (!isVisible) {
   qlearning.style.display = 'block';
   drawGrid();
 }
}

// Ajouter l'animation de "pulse" lors de la frappe dans la zone de texte
document.addEventListener('DOMContentLoaded', function() {
   const textarea = document.querySelector('textarea');
   
   textarea.addEventListener('keydown', function() {
     // Supprimer la classe pour r√©initialiser l'animation
     this.classList.remove('text-pulse');
     
     // Force un reflow pour que l'animation puisse se d√©clencher √† nouveau
     void this.offsetWidth;
     
     // Ajouter la classe pour d√©clencher l'animation
     this.classList.add('text-pulse');
   });
 });




 function toggleGBT() {
 const gbt = document.getElementById('gbt-container');
 const classification = document.getElementById('classification-container');
 const qlearning = document.getElementById('qlearning-container');

 // Masquer les autres
 classification.style.display = 'none';
 qlearning.style.display = 'none';
 gbt.style.display = gbt.style.display === 'block' ? 'none' : 'block';
}

// Fonction pour toggle les sections CV
function toggleCvSection(header) {
    const section = header.parentElement;
    const content = section.querySelector('.cv-section-content');
    const isActive = section.classList.contains('active');
    
    // Si la section est active, on la d√©sactive
    if (isActive) {
        section.classList.remove('active');
        content.style.maxHeight = '0px';
    } else {
        // Si la section est inactive, on l'active
        section.classList.add('active');
        content.style.maxHeight = content.scrollHeight + 'px';
    }
}

// Animation d'entr√©e pour les sections CV au scroll
function animateCvOnScroll() {
    const cvSections = document.querySelectorAll('.cv-section');
    cvSections.forEach(section => {
        const sectionTop = section.getBoundingClientRect().top;
        const sectionVisible = 150;
        
        if (sectionTop < window.innerHeight - sectionVisible) {
            section.style.animation = 'slideInUp 0.6s ease forwards';
        }
    });
}

// Ajouter l'event listener pour le scroll (uniquement si pas d√©j√† pr√©sent)
if (!window.cvScrollListenerAdded) {
    window.addEventListener('scroll', animateCvOnScroll);
    window.cvScrollListenerAdded = true;
    animateCvOnScroll(); // Animation initiale
}

// Fonction pour animer les skill tags au hover (optionnel)
document.addEventListener('DOMContentLoaded', function() {
    const skillTags = document.querySelectorAll('.cv-skill-tag');
    skillTags.forEach(tag => {
        tag.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1) rotate(2deg)';
        });
        
        tag.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
            });
    });
});

// Fonction pour cr√©er un effet de particules sur les ic√¥nes
function createParticleEffect(element) {
    const rect = element.getBoundingClientRect();
    const particleCount = 5;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.style.cssText = `
            position: fixed;
            width: 4px;
            height: 4px;
            background: #00ffcc;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9999;
            box-shadow: 0 0 6px #00ffcc;
            left: ${rect.left + rect.width/2}px;
            top: ${rect.top + rect.height/2}px;
        `;
        
        document.body.appendChild(particle);
        
        // Animation des particules
        const angle = (Math.PI * 2 * i) / particleCount;
        const velocity = 50 + Math.random() * 50;
        const life = 1000 + Math.random() * 500;
        
        particle.animate([
            { 
                transform: 'translate(0, 0) scale(1)',
                opacity: 1
            },
            { 
                transform: `translate(${Math.cos(angle) * velocity}px, ${Math.sin(angle) * velocity}px) scale(0)`,
                opacity: 0
            }
        ], {
            duration: life,
            easing: 'cubic-bezier(0, 0, 0.2, 1)'
        }).addEventListener('finish', () => {
            document.body.removeChild(particle);
        });
    }
}

// Ajouter des effets de particules aux ic√¥nes importantes
document.addEventListener('DOMContentLoaded', function() {
    const importantIcons = document.querySelectorAll('.cv-section-icon, .cv-experience-icon');
    importantIcons.forEach(icon => {
        icon.addEventListener('click', function(e) {
            e.stopPropagation();
            createParticleEffect(this);
        });
    });
});

// Fonction pour cr√©er un compteur anim√© pour les comp√©tences
function animateSkillCounters() {
    const skillCategories = document.querySelectorAll('.cv-skill-category');
    skillCategories.forEach((category, index) => {
        const tags = category.querySelectorAll('.cv-skill-tag');
        const counter = document.createElement('div');
        counter.className = 'skill-counter';
        counter.style.cssText = `
            position: absolute;
            top: -10px;
            right: -10px;
            background: linear-gradient(135deg, #ff6b35, #ffd700);
            color: #000;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            box-shadow: 0 2px 10px rgba(255, 107, 53, 0.4);
            opacity: 0;
            transform: scale(0);
            transition: all 0.3s ease;
        `;
        
        category.style.position = 'relative';
        counter.textContent = tags.length;
        category.appendChild(counter);
        
        // Animer l'apparition du compteur
        setTimeout(() => {
            counter.style.opacity = '1';
            counter.style.transform = 'scale(1)';
        }, index * 200);
    });
}

// Fonction pour cr√©er un syst√®me de progression pour l'exp√©rience
function createExperienceTimeline() {
    const experienceSection = document.querySelector('.cv-section:has(.cv-experience-item)');
    if (!experienceSection) return;
    
    const timeline = document.createElement('div');
    timeline.className = 'cv-timeline';
    timeline.style.cssText = `
        position: absolute;
        left: 20px;
        top: 0;
        bottom: 0;
        width: 4px;
        background: linear-gradient(to bottom, #00ffcc, #ffd700, #ff6b35);
        border-radius: 2px;
        box-shadow: 0 0 10px rgba(0, 255, 204, 0.5);
    `;
    
    const experienceContent = experienceSection.querySelector('.cv-section-content');
    experienceContent.style.position = 'relative';
    experienceContent.appendChild(timeline);
    
    // Ajouter des points sur la timeline
    const experienceItems = experienceSection.querySelectorAll('.cv-experience-item');
    experienceItems.forEach((item, index) => {
        const timelinePoint = document.createElement('div');
        timelinePoint.className = 'timeline-point';
        timelinePoint.style.cssText = `
            position: absolute;
            left: 18px;
            top: ${(index + 1) * 120}px;
            width: 12px;
            height: 12px;
            background: #00ffcc;
            border-radius: 50%;
            border: 3px solid rgba(0, 255, 204, 0.3);
            box-shadow: 0 0 15px #00ffcc;
            animation: pulse 2s infinite;
            z-index: 1;
        `;
        
        experienceContent.appendChild(timelinePoint);
        
        // Ajouter une ligne de connexion
        const connectionLine = document.createElement('div');
        connectionLine.style.cssText = `
            position: absolute;
            left: 24px;
            top: ${(index + 1) * 120 + 6}px;
            width: 50px;
            height: 2px;
            background: linear-gradient(to right, #00ffcc, transparent);
            box-shadow: 0 0 5px rgba(0, 255, 204, 0.5);
        `;
        
        experienceContent.appendChild(connectionLine);
    });
}

// Fonction pour ajouter des tooltips informatifs
function addTooltips() {
    const skillTags = document.querySelectorAll('.cv-skill-tag');
    
    // Donn√©es des tooltips pour chaque comp√©tence
    const tooltipData = {
        'Java': 'Programmation orient√©e objet, Spring Framework',
        'Python': 'Data Science, Django, Automatisation',
        'JavaScript': 'D√©veloppement frontend et backend moderne',
        'SQL': 'Gestion de bases de donn√©es relationnelles',
        'Docker': 'Conteneurisation et d√©ploiement d\'applications',
        'SCRUM': 'M√©thodologie agile de gestion de projet',
        'MongoDB': 'Base de donn√©es NoSQL orient√©e documents',
        'R': 'Analyse statistique et data science'
    };
    
    skillTags.forEach(tag => {
        const skillName = tag.textContent.trim();
        if (tooltipData[skillName]) {
            tag.title = tooltipData[skillName];
            tag.style.cursor = 'help';
        }
    });
}

// Fonction pour cr√©er un mode sombre/clair
function createThemeToggle() {
    const toggleButton = document.createElement('button');
    toggleButton.innerHTML = '<i class="fas fa-moon"></i>';
    toggleButton.className = 'theme-toggle';
    toggleButton.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #9b59b6, #be75e6);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 4px 15px rgba(155, 89, 182, 0.4);
        transition: all 0.3s ease;
    `;
    
    document.body.appendChild(toggleButton);
    
    let isDarkMode = true;
    
    toggleButton.addEventListener('click', function() {
        isDarkMode = !isDarkMode;
        
        if (isDarkMode) {
            document.body.style.filter = 'none';
            this.innerHTML = '<i class="fas fa-moon"></i>';
        } else {
            document.body.style.filter = 'invert(1) hue-rotate(180deg)';
            this.innerHTML = '<i class="fas fa-sun"></i>';
        }
        
        // Animation du bouton
        this.style.transform = 'scale(0.9)';
        setTimeout(() => {
            this.style.transform = 'scale(1)';
        }, 150);
    });
}

// Fonction pour cr√©er un effet de typing sur le texte de profil
function createTypingEffect() {
    const profileText = document.querySelector('.cv-profile-text');
    if (!profileText) return;
    
    const originalText = profileText.textContent;
    profileText.textContent = '';
    
    let i = 0;
    const typeWriter = () => {
        if (i < originalText.length) {
            profileText.textContent += originalText.charAt(i);
            i++;
            setTimeout(typeWriter, 50);
        }
    };
    
    // Observer pour d√©clencher l'animation quand la section est visible
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting && entry.target === profileText.parentElement) {
                typeWriter();
                observer.disconnect();
            }
        });
    });
    
    observer.observe(profileText.parentElement);
}

// Fonction pour ajouter des sons aux interactions (optionnel)
function addSoundEffects() {
    // Cr√©er des sons avec l'API Web Audio (plus moderne que des fichiers audio)
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    
    function playTone(frequency, duration) {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = frequency;
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + duration);
    }
    
    // Ajouter des sons aux interactions
    document.querySelectorAll('.cv-section-header').forEach(header => {
        header.addEventListener('click', () => playTone(800, 0.1));
    });
    
    document.querySelectorAll('.cv-skill-tag').forEach(tag => {
        tag.addEventListener('mouseenter', () => playTone(1000, 0.05));
    });
}

// Optimisation des performances
const ANIMATION_FRAME = window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function(callback) { setTimeout(callback, 1000 / 60); };

// Fonction d'initialisation optimis√©e
function initCvInteractions() {
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCvInteractions);
        return;
    }
    
    // Initialisation du cache DOM
    domCache.cvSections = document.querySelectorAll('.cv-section');
    domCache.githubRepos = document.getElementById('github-repos');
    domCache.profileText = document.querySelector('.cv-profile-text');

    // Initialisation des fonctionnalit√©s avec d√©lai optimis√©
    const initSequence = [
        { fn: initExperienceAnimations, delay: 0 },
        { fn: loadGitHubRepos, delay: 100 },
        { fn: initScrollAnimations, delay: 300 }
    ];

    initSequence.forEach(({ fn, delay }) => {
        setTimeout(() => requestAnimationFrame(fn), delay);
    });

    // Appel unique √† createAnimatedStats
    setTimeout(() => {
        const existingStats = document.querySelector('.cv-stats');
        if (!existingStats) {
            createAnimatedStats();
        }
    }, 200);
}

// Optimisation des animations d'exp√©rience
function initExperienceAnimations() {
    const experienceItems = document.querySelectorAll('.cv-experience-item');
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateX(0)';
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '0px'
    });

    experienceItems.forEach(item => observer.observe(item));
}

// Optimisation du toggle des sections
function toggleCvSection(header) {
    const section = header.parentElement;
    const content = section.querySelector('.cv-section-content');
    const isActive = section.classList.contains('active');

    requestAnimationFrame(() => {
        if (isActive) {
            section.classList.remove('active');
            content.style.maxHeight = '0px';
        } else {
            section.classList.add('active');
            content.style.maxHeight = `${content.scrollHeight}px`;
        }
    });
}

// Optimisation du chargement GitHub
async function loadGitHubRepos() {
    const projectsContainer = document.getElementById('github-projects');
    if (!projectsContainer) return;

    try {
        projectsContainer.innerHTML = `
            <div class="loading">
                <i class="fas fa-code-branch fa-spin"></i>
                Chargement des projets...
            </div>`;
        
        const response = await fetch(`https://api.github.com/users/itssghir/repos?sort=updated&per_page=100`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const repos = await response.json();

        if (repos.length === 0) {
            projectsContainer.innerHTML = `
                <div class="no-projects">
                    <i class="fas fa-folder-open"></i>
                    Aucun projet public disponible
                </div>`;
            return;
        }

        const filteredRepos = repos
            .filter(repo => !repo.fork && !repo.archived)
            .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));

        const projectsHTML = filteredRepos
            .map(repo => createRepoCard(repo))
            .join('');

        projectsContainer.innerHTML = `
            <div class="repos-grid">
                ${projectsHTML}
            </div>`;

        // Add hover effects after rendering
        document.querySelectorAll('.repo-card').forEach(card => {
            card.addEventListener('mouseenter', () => createParticleEffect(card));
        });

    } catch (error) {
        console.error('Erreur GitHub:', error);
        projectsContainer.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-triangle"></i>
                Impossible de charger les projets GitHub. 
                <a href="https://github.com/itssghir" target="_blank" rel="noopener">
                    Voir mon profil GitHub <i class="fas fa-external-link-alt"></i>
                </a>
            </div>`;
    }
}

function createRepoCard(repo) {
    const topics = repo.topics && repo.topics.length > 0 
        ? `<div class="repo-topics">${repo.topics.map(topic => `<span class="topic">${topic}</span>`).join('')}</div>`
        : '';
    
    const homepage = repo.homepage 
        ? `<a href="${repo.homepage}" target="_blank" rel="noopener" class="repo-link homepage-link">
            <i class="fas fa-globe"></i> Demo
           </a>`
        : '';

    return `
        <div class="repo-card" data-repo-id="${repo.id}">
            <div class="repo-header">
                <h3 class="repo-title">
                    <a href="${repo.html_url}" target="_blank" rel="noopener">
                        <i class="fab fa-github"></i> ${repo.name}
                    </a>
                </h3>
                <div class="repo-links">
                    ${homepage}
                    <a href="${repo.html_url}" target="_blank" rel="noopener" class="repo-link">
                        <i class="fas fa-code"></i> Code
                    </a>
            </div>
            </div>
            
            <p class="repo-description">${repo.description || 'Aucune description disponible'}</p>
            
            ${topics}
            
            <div class="repo-stats">
                <span class="repo-stat">
                    <i class="fas fa-star"></i> ${repo.stargazers_count}
                </span>
                <span class="repo-stat">
                    <i class="fas fa-code-branch"></i> ${repo.forks_count}
                </span>
                <span class="repo-stat ${repo.language ? 'with-language' : ''}">
                    <i class="fas fa-circle" style="color: ${getLanguageColor(repo.language)}"></i>
                    ${repo.language || 'N/A'}
                </span>
                <span class="repo-stat">
                    <i class="fas fa-clock"></i>
                    ${formatDate(repo.updated_at)}
                </span>
        </div>
        </div>
    `;
}

function getLanguageColor(language) {
    const colors = {
        'JavaScript': '#f1e05a',
        'Python': '#3572A5',
        'HTML': '#e34c26',
        'CSS': '#563d7c',
        'TypeScript': '#2b7489',
        'Java': '#b07219',
        'C++': '#f34b7d',
        'PHP': '#4F5D95',
        'Ruby': '#701516',
        'Swift': '#ffac45',
        'Go': '#00ADD8',
        'Rust': '#dea584'
    };
    return colors[language] || '#8e8e8e';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) return 'Hier';
    if (diffDays < 7) return `Il y a ${diffDays} jours`;
    if (diffDays < 30) return `Il y a ${Math.floor(diffDays/7)} semaines`;
    if (diffDays < 365) return `Il y a ${Math.floor(diffDays/30)} mois`;
    return `Il y a ${Math.floor(diffDays/365)} ans`;
}

// Optimisation des animations au scroll
function initScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                requestAnimationFrame(() => {
                    entry.target.style.animation = 'slideInUp 0.6s ease forwards';
                });
                observer.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.1
    });

    document.querySelectorAll('.cv-section').forEach(section => {
        observer.observe(section);
    });
}

// D√©marrage optimis√©
document.addEventListener('DOMContentLoaded', () => {
    initCvInteractions();
    loadGitHubRepos(); // Charger les projets GitHub
    initScrollAnimations();
    createExperienceTimeline();
    addTooltips();
    createThemeToggle();
    createTypingEffect();
    addSoundEffects();
});

// D√©sactivation des animations si la pr√©f√©rence de r√©duction de mouvement est activ√©e
if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
    document.documentElement.style.setProperty('--animation-duration', '0s');
}

// Fonction pour cr√©er des statistiques anim√©es
function createAnimatedStats() {
    // V√©rifier si les stats existent d√©j√†
    if (document.querySelector('.cv-stats')) {
        return; // Ne pas cr√©er de nouvelles stats si elles existent d√©j√†
    }
    
    const statsContainer = document.createElement('div');
    statsContainer.className = 'cv-stats';
    statsContainer.style.cssText = `
        background: linear-gradient(135deg, rgba(138, 43, 226, 0.2), rgba(255, 20, 147, 0.2));
        padding: 20px;
        border-radius: 15px;
        margin: 20px 0;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
    `;
    
    const stats = [
        { label: 'Ann√©es d\'exp√©rience', value: 3, suffix: '+' },
        { label: 'Projets r√©alis√©s', value: 15, suffix: '+' },
        { label: 'Technologies ma√Ætris√©es', value: 12, suffix: '' },
        { label: 'Certifications', value: 1, suffix: '' }
    ];
    
    stats.forEach((stat, index) => {
        const statItem = document.createElement('div');
        statItem.style.cssText = `
            text-align: center;
            color: white;
        `;
        
        statItem.innerHTML = `
            <div style="font-size: 2rem; font-weight: bold; color: #00ffcc; text-shadow: 0 0 10px #00ffcc;" class="stat-number">0</div>
            <div style="font-size: 0.9rem; opacity: 0.8;">${stat.label}</div>
        `;
        
        statsContainer.appendChild(statItem);
        
        // Animer le compteur
        const numberElement = statItem.querySelector('.stat-number');
        let current = 0;
        const increment = stat.value / 50;
        const timer = setInterval(() => {
            current += increment;
            if (current >= stat.value) {
                current = stat.value;
                clearInterval(timer);
            }
            numberElement.textContent = Math.floor(current) + stat.suffix;
        }, 50);
    });
    
    // Ins√©rer les stats apr√®s la section profil
    const profileSection = document.querySelector('.cv-section.active');
    if (profileSection) {
        profileSection.insertAdjacentElement('afterend', statsContainer);
    }
}

// Navbar Interaction
document.addEventListener('DOMContentLoaded', function() {
    const navbar = document.querySelector('.navbar');
    const navbarToggle = document.querySelector('.navbar-toggle');
    const navbarMenu = document.querySelector('.navbar-menu');
    const navbarItems = document.querySelectorAll('.navbar-item');

    // Gestion du menu mobile
    navbarToggle?.addEventListener('click', () => {
        navbarToggle.classList.toggle('active');
        navbarMenu?.classList.toggle('active');
    });

    // Fonction pour ouvrir une section CV
    function openCvSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            const cvSection = section.closest('.cv-section');
            if (cvSection) {
                // Fermer toutes les sections d'abord
                document.querySelectorAll('.cv-section').forEach(s => {
                    s.classList.remove('active');
                    const content = s.querySelector('.cv-section-content');
                    if (content) content.style.maxHeight = '0px';
                });
                
                // Ouvrir la section cibl√©e
                cvSection.classList.add('active');
                const content = cvSection.querySelector('.cv-section-content');
                if (content) content.style.maxHeight = content.scrollHeight + 'px';
            }
        }
    }

    // Smooth scroll am√©lior√© pour les liens de navigation
    navbarItems.forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1); // Enl√®ve le # du d√©but
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
                // Fermer le menu mobile si ouvert
                navbarToggle?.classList.remove('active');
                navbarMenu?.classList.remove('active');

                // Ouvrir la section CV correspondante
                openCvSection(targetId);

                // Calculer la position avec offset pour la navbar fixe
                const navbarHeight = navbar.offsetHeight;
                const targetPosition = targetSection.offsetTop - navbarHeight;

                // Smooth scroll vers la section
                window.scrollTo({
                    top: targetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Effet de transparence au scroll
    let lastScroll = 0;
    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        
        if (currentScroll <= 0) {
            navbar.style.background = 'rgba(75, 0, 130, 0.1)';
        } else if (currentScroll > lastScroll) {
            navbar.style.background = 'rgba(75, 0, 130, 0.95)';
        }
        
        lastScroll = currentScroll;
    });

    // Effet de surlignage de la section active am√©lior√©
    const observerOptions = {
        root: null,
        rootMargin: '-20% 0px -80% 0px',
        threshold: 0
    };

    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const id = entry.target.id;
                navbarItems.forEach(item => {
                    if (item.getAttribute('href') === `#${id}`) {
                        item.classList.add('active');
                        item.style.textShadow = '0 0 10px #00ffcc';
                        // Ouvrir automatiquement la section correspondante
                        openCvSection(id);
                    } else {
                        item.classList.remove('active');
                        item.style.textShadow = 'none';
                    }
                });
            }
        });
    }, observerOptions);

    // Observer chaque section
    document.querySelectorAll('section[id]').forEach(section => {
        observer.observe(section);
    });
});

// Initialisation du chat
document.addEventListener('DOMContentLoaded', function() {
    const chatToggle = document.getElementById('chat-toggle');
    if (chatToggle) {
        chatToggle.addEventListener('click', function() {
            const chatContainer = document.querySelector('.chat-container');
            const toggleText = this.querySelector('span');
            const chatMessages = document.getElementById('chat-messages');
            
            if (!chatContainer || !toggleText || !chatMessages) {
                console.error('Un ou plusieurs √©l√©ments du chat sont manquants');
                return;
            }
            
            chatContainer.classList.toggle('active');
            this.classList.toggle('active');
            
            if (chatContainer.classList.contains('active')) {
                toggleText.textContent = 'Fermer l\'assistant';
                chatMessages.scrollTop = chatMessages.scrollHeight;
                setTimeout(() => {
                    const chatInput = document.getElementById('chat-input');
                    if (chatInput) {
                        chatInput.focus();
                    }
                }, 300);
            } else {
                toggleText.textContent = 'Ouvrir l\'assistant';
            }
        });
    } else {
        console.error('L\'√©l√©ment chat-toggle n\'a pas √©t√© trouv√©');
    }
});

// Gestionnaire d'√©v√©nements pour la touche Entr√©e dans le chat
document.addEventListener('DOMContentLoaded', function() {
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
});