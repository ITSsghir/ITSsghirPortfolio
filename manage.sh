#!/bin/bash

# =============================================================================
# üõ†Ô∏è SCRIPT DE GESTION - PORTFOLIO ITSSGHIR
# =============================================================================
# Description: Script pour g√©rer le portfolio (logs, maintenance, monitoring)
# Version: 1.0.0
# =============================================================================

set -e

# Configuration des couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log() {
    local level=$1
    shift
    local message="$@"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    case $level in
        "ERROR")   echo -e "${RED}[ERROR]${NC} [$timestamp] $message" ;;
        "WARN")    echo -e "${YELLOW}[WARN]${NC} [$timestamp] $message" ;;
        "SUCCESS") echo -e "${GREEN}[SUCCESS]${NC} [$timestamp] $message" ;;
        "INFO")    echo -e "${BLUE}[INFO]${NC} [$timestamp] $message" ;;
        *)         echo -e "${CYAN}[LOG]${NC} [$timestamp] $message" ;;
    esac
}

print_banner() {
    echo -e "${PURPLE}"
    cat << "EOF"
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  üõ†Ô∏è PORTFOLIO MANAGER                       ‚ïë
    ‚ïë                     Gestion & Maintenance                    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

print_usage() {
    cat << EOF
Usage: $0 [COMMAND] [OPTIONS]

COMMANDES DISPONIBLES:
    status        Afficher le statut des services
    logs          Afficher les logs
    restart       Red√©marrer les services
    stop          Arr√™ter les services
    start         D√©marrer les services
    update        Mettre √† jour les services
    backup        Cr√©er une sauvegarde
    restore       Restaurer depuis une sauvegarde
    clean         Nettoyer Docker
    monitor       Monitoring en temps r√©el
    health        V√©rification de sant√©
    help          Afficher cette aide

OPTIONS POUR LES LOGS:
    -f, --follow    Suivre les logs en temps r√©el
    -n, --lines     Nombre de lignes √† afficher (default: 100)
    --frontend      Logs du frontend uniquement
    --backend       Logs du backend uniquement

EXEMPLES:
    $0 status
    $0 logs --follow
    $0 logs --backend -n 50
    $0 restart
    $0 backup

EOF
}

check_services() {
    if ! docker compose ps | grep -q "Up"; then
        log "WARN" "Aucun service n'est en cours d'ex√©cution"
        return 1
    fi
    return 0
}

cmd_status() {
    log "INFO" "üìä Statut des services Portfolio"
    echo
    
    docker compose ps
    echo
    
    log "INFO" "üíª Utilisation des ressources:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
    echo
    
    log "INFO" "üåê Ports expos√©s:"
    docker compose ps --format "table {{.Service}}\t{{.Ports}}"
}

cmd_logs() {
    local follow=false
    local lines=100
    local service=""
    
    # Parser les options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                follow=true
                shift
                ;;
            -n|--lines)
                lines="$2"
                shift 2
                ;;
            --frontend)
                service="portfolio-frontend"
                shift
                ;;
            --backend)
                service="portfolio-backend"
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    if ! check_services; then
        return 1
    fi
    
    log "INFO" "üìã Affichage des logs ($lines lignes)"
    
    if [[ $follow == "true" ]]; then
        if [[ -n $service ]]; then
            docker compose logs -f --tail="$lines" "$service"
        else
            docker compose logs -f --tail="$lines"
        fi
    else
        if [[ -n $service ]]; then
            docker compose logs --tail="$lines" "$service"
        else
            docker compose logs --tail="$lines"
        fi
    fi
}

cmd_restart() {
    local service=${1:-}
    
    if [[ -n $service ]]; then
        log "INFO" "üîÑ Red√©marrage du service: $service"
        docker compose restart "$service"
    else
        log "INFO" "üîÑ Red√©marrage de tous les services"
        docker compose restart
    fi
    
    log "SUCCESS" "Services red√©marr√©s"
    cmd_status
}

cmd_stop() {
    log "INFO" "‚èπÔ∏è Arr√™t des services"
    docker compose stop
    log "SUCCESS" "Services arr√™t√©s"
}

cmd_start() {
    log "INFO" "‚ñ∂Ô∏è D√©marrage des services"
    docker compose start
    
    # Attendre un peu pour la stabilisation
    sleep 5
    
    log "SUCCESS" "Services d√©marr√©s"
    cmd_status
}

cmd_update() {
    log "INFO" "üîÑ Mise √† jour des services"
    
    # Pull des nouvelles images
    docker compose pull
    
    # Rebuild et red√©marrage
    docker compose up --build -d
    
    log "SUCCESS" "Services mis √† jour"
    cmd_status
}

cmd_backup() {
    log "INFO" "üíæ Cr√©ation d'une sauvegarde..."
    
    local backup_dir="./backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Sauvegarder les donn√©es des conteneurs s'ils existent
    if docker ps -a | grep -q "portfolio-frontend"; then
        log "INFO" "Sauvegarde des donn√©es frontend..."
        docker run --rm \
            --volumes-from portfolio-frontend \
            -v "$PWD/$backup_dir":/backup \
            alpine tar czf /backup/frontend-data.tar.gz /usr/share/nginx/html 2>/dev/null || true
    fi
    
    if docker ps -a | grep -q "portfolio-backend"; then
        log "INFO" "Sauvegarde des donn√©es backend..."
        docker run --rm \
            --volumes-from portfolio-backend \
            -v "$PWD/$backup_dir":/backup \
            alpine tar czf /backup/backend-data.tar.gz /app 2>/dev/null || true
    fi
    
    log "SUCCESS" "Sauvegarde cr√©√©e dans: $backup_dir"
}

cmd_clean() {
    log "INFO" "üßπ Nettoyage Docker..."
    
    # Supprimer les conteneurs arr√™t√©s
    docker container prune -f
    
    # Supprimer les images non utilis√©es
    docker image prune -f
    
    # Supprimer les volumes non utilis√©s
    docker volume prune -f
    
    # Supprimer les r√©seaux non utilis√©s
    docker network prune -f
    
    log "SUCCESS" "Nettoyage termin√©"
}

cmd_monitor() {
    log "INFO" "üìä Monitoring en temps r√©el"
    log "INFO" "Appuyez sur Ctrl+C pour arr√™ter"
    
    watch -n 2 'docker compose ps && echo "" && docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"'
}

cmd_health() {
    log "INFO" "üè• V√©rification de sant√© des services"
    
    # V√©rifier le frontend
    if curl -f -s http://localhost:80 > /dev/null; then
        log "SUCCESS" "Frontend: ‚úÖ OK"
    else
        log "ERROR" "Frontend: ‚ùå KO"
    fi
    
    # V√©rifier le backend
    if docker exec portfolio-backend curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
        log "SUCCESS" "Backend: ‚úÖ OK"
    else
        log "ERROR" "Backend: ‚ùå KO"
    fi
    
    # V√©rifier Traefik
    if docker ps | grep -q traefik; then
        log "SUCCESS" "Traefik: ‚úÖ OK"
    else
        log "ERROR" "Traefik: ‚ùå KO"
    fi
}

# Script principal
main() {
    local command=${1:-help}
    
    case $command in
        status)
            cmd_status
            ;;
        logs)
            shift
            cmd_logs "$@"
            ;;
        restart)
            shift
            cmd_restart "$@"
            ;;
        stop)
            cmd_stop
            ;;
        start)
            cmd_start
            ;;
        update)
            cmd_update
            ;;
        backup)
            cmd_backup
            ;;
        restore)
            log "WARN" "Fonctionnalit√© de restauration non impl√©ment√©e"
            ;;
        clean)
            cmd_clean
            ;;
        monitor)
            cmd_monitor
            ;;
        health)
            cmd_health
            ;;
        help|--help|-h)
            print_banner
            print_usage
            ;;
        *)
            log "ERROR" "Commande inconnue: $command"
            print_usage
            exit 1
            ;;
    esac
}

# Ex√©cuter le script principal
main "$@" 